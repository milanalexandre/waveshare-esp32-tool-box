defmodule Convert do
    def hex_to_bin(n), do: hex_to_bin(n, 8)
    def hex_to_bin(_, 0), do: ""
    def hex_to_bin(n, i) do
        hex_to_bin(div(n, 2), i-1) <> "#{rem(n, 2)}"
    end
end

IO.inspect(Convert.hex_to_bin(0x63))


a= [
[0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0],
[0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00],
[0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x01, 0xC0, 0x03, 0xC0, 0x03, 0x80],
[0x01, 0xE0, 0x00, 0x00, 0x07, 0x80, 0x01, 0xF0, 0x00, 0x00, 0x0F, 0x80, 0x00, 0xF8, 0x00, 0x00],
[0x1F, 0x00, 0x00, 0x7C, 0x07, 0xE0, 0x3E, 0x00, 0x00, 0x38, 0x3F, 0xFC, 0x1C, 0x00, 0x00, 0x10],
[0xFF, 0xFF, 0x08, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0xC0, 0x00],
[0x00, 0x07, 0xF0, 0x0F, 0xE0, 0x00, 0x00, 0x07, 0xC0, 0x03, 0xE0, 0x00, 0x00, 0x0F, 0x80, 0x01],
[0xF0, 0x00, 0x00, 0x0F, 0x80, 0x01, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x1F],
[0x00, 0x00, 0xF8, 0x00, 0x7F, 0x1E, 0x00, 0x00, 0x78, 0xFE, 0xFF, 0x1E, 0x00, 0x00, 0x78, 0xFF],
[0xFF, 0x1E, 0x00, 0x00, 0x78, 0xFF, 0x7F, 0x1E, 0x00, 0x00, 0x78, 0xFE, 0x00, 0x1F, 0x00, 0x00],
[0xF8, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x80, 0x01, 0xF0, 0x00, 0x00, 0x0F],
[0x80, 0x01, 0xF0, 0x00, 0x00, 0x07, 0xC0, 0x03, 0xE0, 0x00, 0x00, 0x07, 0xF0, 0x0F, 0xE0, 0x00],
[0x00, 0x03, 0xFC, 0x3F, 0xC0, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x10, 0xFF, 0xFF],
[0x08, 0x00, 0x00, 0x38, 0x3F, 0xFC, 0x1C, 0x00, 0x00, 0x7C, 0x07, 0xE0, 0x3E, 0x00, 0x00, 0xF8],
[0x00, 0x00, 0x1F, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x0F, 0x80, 0x01, 0xE0, 0x00, 0x00, 0x07, 0x80],
[0x01, 0xC0, 0x03, 0xC0, 0x03, 0x80, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0],
[0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00],
[0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00]
]
a= [
[0x00, 0x00],
[0x00, 0x00],
[0x00, 0x00],
[0x00, 0x00],
[0x3F, 0x80],
[0x21, 0x80],
[0x03, 0x00],
[0x0E, 0x00],
[0x18, 0x00],
[0x30, 0x80],
[0x3F, 0x80],
[0x00, 0x00],
[0x00, 0x00],
[0x00, 0x00],
[0x00, 0x00],
[0x00, 0x00],
]
a |> Enum.map(fn va -> Enum.map(va, fn pa -> Convert.hex_to_bin(pa) end) |> Enum.join("") end) |> Enum.join("\n") |> IO.puts


txt ="""
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0011111110000000
0010000110000000
0000001100000000
0000111000000000
0001100000000000
0011000010000000
0011111110000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
"""
defmodule Convert do
    def bin_to_hex(txt) do
        txt |> String.split("\n") |> Enum.filter(& &1!="") |> Enum.map(fn val -> 
            split(val)
        end) 
    end
    
    def split(""), do: [nil]
    def split(val) do
        {x1, x2} = String.split_at(val, 8)
        [String.trim_leading(x1, "0") | split(x2) ] |> Enum.filter(& &1)
    end

    def bin(""), do: "00"
    def bin(txt) do
        
    end

end
Convert.bin_to_hex(txt)